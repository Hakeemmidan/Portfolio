<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hakeem Almidan</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Hakeem Almidan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Fri, 13 Sep 2024 01:01:01 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>lsdir - A Shell Alias for Only Listing Directories</title>
      <link>http://localhost:1313/posts/lsdir/</link>
      <pubDate>Fri, 13 Sep 2024 01:01:01 -0700</pubDate>
      <guid>http://localhost:1313/posts/lsdir/</guid>
      <description>&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;When working in the terminal, you sometimes need to list only the directories in the current location. The standard &lt;code&gt;ls&lt;/code&gt; command shows both files and directories, which can be overwhelming in cluttered directories.&lt;/p&gt;
&lt;p&gt;The command for listing only directories in the current location is &lt;code&gt;ls -d */&lt;/code&gt; (&lt;a href=&#34;https://stackoverflow.com/a/29264762/7974948&#34;&gt;source&lt;/a&gt;) which is not simple to remember, especially if it&amp;rsquo;s not something that you do often.&lt;/p&gt;
&lt;h2 id=&#34;the-solution-lsdir&#34;&gt;The Solution: lsdir&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lsdir&lt;/code&gt;, an alias for only listing directories, which hopefully is easier to remember.&lt;/p&gt;
&lt;h3 id=&#34;1-open-your-zshrc-or-bashrc-file&#34;&gt;1. Open your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt; file:&lt;/h3&gt;
&lt;p&gt;For Zsh:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Bash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-click-i-on-your-keyboard-to-go-into-editing-mode-in-vim&#34;&gt;2. Click &lt;code&gt;i&lt;/code&gt; on your keyboard to go into editing mode in &lt;code&gt;vim&lt;/code&gt;&lt;/h3&gt;
&lt;h3 id=&#34;3-add-the-following-line&#34;&gt;3. Add the following line:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias lsdir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls -d */&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-save-the-file-and-reload-your-shell-configuration&#34;&gt;4. Save the file and reload your shell configuration:&lt;/h3&gt;
&lt;p&gt;For Zsh:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Bash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-try-it&#34;&gt;5. Try it&lt;/h3&gt;
&lt;figure class=&#34;image center&#34;&gt;
&lt;a href=&#34;lsdir_cmnd.png&#34;&gt;&lt;img src=&#34;lsdir_cmnd.png&#34; alt=&#34;Directories listed using ls and lsdir commands&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Directories listed using ls and lsdir commands&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You&amp;rsquo;re done; Happy coding! ðŸ‘¾&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop Arrowing Up So Much In Terminal; Search Instead! (Linux/Unix)</title>
      <link>http://localhost:1313/posts/terminal-search/</link>
      <pubDate>Thu, 31 Dec 2020 19:01:40 +0300</pubDate>
      <guid>http://localhost:1313/posts/terminal-search/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Do you ever &lt;em&gt;NOT&lt;/em&gt; feel like re-writing a command that you wrote some N commands ago?
I do!&lt;/p&gt;
&lt;p&gt;Arrowing up and focusing until you reach what you want can be annoying for an efficient
programmer. Although it usually only takes a couple of seconds, it still adds up. Plus,
you don&amp;rsquo;t want to waste your brainpower on such a task (unless you like doing it).&lt;/p&gt;
&lt;p&gt;One of the best pieces of advice I heard when I first started programming is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Always improve/automate tasks that you know you&amp;rsquo;re going to continuously repeat in the future&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So let&amp;rsquo;s do that. Let&amp;rsquo;s improve this situation.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h4 id=&#34;ctrlr&#34;&gt;Ctrl+r&lt;/h4&gt;
&lt;p&gt;This does a &amp;lsquo;reverse-i-search&amp;rsquo; or &amp;lsquo;bck-i-search&amp;rsquo;, which finds the most recent closest match.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+r&lt;/code&gt; again to go to next match (further back in history).&lt;/p&gt;
&lt;figure class=&#34;image center&#34;&gt;
&lt;a href=&#34;ctrl-r.png&#34;&gt;&lt;img src=&#34;ctrl-r.png&#34; alt=&#34;Ctrl&amp;#43;r keyboard shortcut example use&#34; width=&#34;400&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Ctrl+r keyboard shortcut example use&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It searches through an environment variable called &lt;code&gt;$HISTFILE&lt;/code&gt;. The number of commands that
this file remembers depends on your &lt;code&gt;$HISTSIZE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I believe the default &lt;code&gt;$HISTSIZE&lt;/code&gt; in Unix/Linux is around 500. You can check yours by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo $HISTSIZE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h4 id=&#34;alternative-approach&#34;&gt;Alternative approach&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ history &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example command 0&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example command 1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example command 2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example command 3&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This displays your history from 0 to &lt;code&gt;$HISTSIZE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can either scroll or &lt;code&gt;Cmd+f&lt;/code&gt; to find your command.
To execute the command, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ !&amp;lt;command-number&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip; where &lt;code&gt;command-number&lt;/code&gt; is the number displayed leftmost to your selected command.&lt;/p&gt;
&lt;figure class=&#34;image center&#34;&gt;
&lt;a href=&#34;history.png&#34;&gt;&lt;img src=&#34;history.png&#34; alt=&#34;&amp;#39;history 0&amp;#39; command example use&#34; width=&#34;500&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&amp;lsquo;history 0&amp;rsquo; command example use&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Useful Tools that Helped in Building a Custom Promotion-Code CLI (built in Ruby)</title>
      <link>http://localhost:1313/posts/custom-promotion-code-cli/</link>
      <pubDate>Tue, 24 Nov 2020 21:13:02 +0300</pubDate>
      <guid>http://localhost:1313/posts/custom-promotion-code-cli/</guid>
      <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what&#34;&gt;What&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why&#34;&gt;Why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-tools&#34;&gt;The Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#show-me-the-code&#34;&gt;Show me the code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what&#34;&gt;What&lt;/h2&gt;
&lt;p&gt;This is post is going to be referring to &lt;a href=&#34;https://github.com/Hakeemmidan/custom-promotion-code-cli&#34;&gt;this custom promotion-code generating CLI&lt;/a&gt;&amp;rsquo;s code, and about useful tools that helped in building it. All the tools mentioned are native to Ruby (no external gems were used)&lt;/p&gt;
&lt;p&gt;The data generated is going to be stored in a JSON object, and has the following format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;FirstName LastName&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;String: Generated code&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;activated&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Boolean&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may think &amp;ldquo;Wait a minute there, that&amp;rsquo;s not a scalable solution, isn&amp;rsquo;t it?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Well, yes, ideally, the promotion codes should be directly connected to your database. But if you want a quick solution, this should be fine&lt;/p&gt;
&lt;p&gt;Also, keep in mind that this is not storing your main data. It&amp;rsquo;s just storing the promotion codes and checking
whether they&amp;rsquo;re activated or not. It has a constant (O(1)) lookup and write time-complexity, and can hold an awful lot of data. Approximately, a JSON file can hold about &lt;a href=&#34;https://stackoverflow.com/a/60300454/7974948&#34;&gt;18 quintillion characters&lt;/a&gt;. For context: &amp;ldquo;Harry Potter and the Deathly Hallows&amp;rdquo; has &lt;a href=&#34;https://docs.google.com/document/d/1gIMVTGfHAODR_1CUjLpM_4Uzrrs3BLzt9IRq2rLK8-0/edit?usp=sharing&#34;&gt;about 1 million characters&lt;/a&gt;. So, in total, a JSON file would hold about &lt;em&gt;13 trillion&lt;/em&gt; copies of that book. That&amp;rsquo;s a lot!&lt;/p&gt;
&lt;figure class=&#34;image center&#34;&gt;
&lt;a href=&#34;prm-cli-screenshot.png&#34;&gt;&lt;img src=&#34;prm-cli-screenshot.png&#34; alt=&#34;Screenshot of promotional code generator CLI&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Screenshot of promotional code generator CLI&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;why&#34;&gt;Why&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Why should I bother with creating a &lt;em&gt;custom&lt;/em&gt; promotion-code generator?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;As you may know, promotional codes are typically used in stores, offline and online, to drive traffic.
Generally speaking, general promotion codes (ones not mapped to a specific person), don&amp;rsquo;t need to be unique.
In fact, you want them to be generic to drive as much traffic to your store as possible. They should be easy to guess and could be safely made up by humans&lt;/p&gt;
&lt;p&gt;Customized promotion codes, on the other hand, though intended to also drive traffic, have another sole purpose. The main purpose of them should be to get specific people onto your platform&lt;/p&gt;
&lt;p&gt;Understanding that these codes are made for specific people, you want them to be harder to guess. That is because we don&amp;rsquo;t want some imposter claiming our invitees&amp;rsquo; rewards&lt;/p&gt;
&lt;p&gt;Hope that makes sense. If not, feel free to drop a comment&lt;/p&gt;
&lt;h2 id=&#34;the-tools&#34;&gt;The Tools&lt;/h2&gt;
&lt;h3 id=&#34;1-kernelputshttpsruby-docorgcore-270kernelhtmlmethod-i-puts&#34;&gt;1. &lt;a href=&#34;https://ruby-doc.org/core-2.7.0/Kernel.html#method-i-puts&#34;&gt;Kernel#puts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Prints string on single line (doesn&amp;rsquo;t allow other stuff to get printed on same line)&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;World
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-kernelgetshttpsapidockcomrubykernelgets-and-stringchomphttpsruby-docorgcore-250stringhtmlmethod-i-chomp&#34;&gt;2. &lt;a href=&#34;https://apidock.com/ruby/Kernel/gets&#34;&gt;Kernel#gets&lt;/a&gt; and &lt;a href=&#34;https://ruby-doc.org/core-2.5.0/String.html#method-i-chomp&#34;&gt;String#chomp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gets&lt;/code&gt;: Takes input from shell&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chomp&lt;/code&gt;: Takes off newline character (&lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;) off from end of string. This character gets generated when user hits the &lt;code&gt;enter&lt;/code&gt; key&lt;/p&gt;
&lt;p&gt;Put together because they are often used together. Just having &lt;code&gt;Kernel#gets&lt;/code&gt; will leave you with a string with &lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt; at the end of it&lt;/p&gt;
&lt;p&gt;The following example uses both to avoid that&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Please say something: &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts answer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ Please say something: Hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: The project referred to in this post doesn&amp;rsquo;t use &lt;code&gt;gets.chomp&lt;/code&gt; and uses
&lt;code&gt;Readline&lt;/code&gt; (&lt;a href=&#34;#3-readlinereadlinefile-name-refer-to-history-boolhttpsruby-docorgstdlib-251libdocreadlinerdocreadlinehtmlmethod-c-readline&#34;&gt;#3&lt;/a&gt;) instead. That is since &lt;code&gt;Readline&lt;/code&gt; provides autocompletion, history reference, and other useful functionalities. But &lt;code&gt;gets.chomp&lt;/code&gt; could be useful for getting simple input in some
instances. So it&amp;rsquo;s worth the mention&lt;/p&gt;
&lt;h3 id=&#34;3-readlinereadlinefile-name-refer-to-history-boolhttpsruby-docorgstdlib-251libdocreadlinerdocreadlinehtmlmethod-c-readline&#34;&gt;3. &lt;a href=&#34;https://ruby-doc.org/stdlib-2.5.1/libdoc/readline/rdoc/Readline.html#method-c-readline&#34;&gt;Readline::readline(&amp;lt;file name&amp;gt;, &amp;lt;refer to history bool&amp;gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Takes input from shell. Takes off newline character (&lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;) automatically&lt;/p&gt;
&lt;p&gt;Second argument takes boolean to flag whether to remember history or not.
If you set to &lt;code&gt;true&lt;/code&gt;,  it will remember previous answers from same file-run session&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;readline&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Readline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Please say something: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts answer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Readline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Please say something: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts answer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ Please say something: Hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ Please say something: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*click up-arrow*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ Please say something: Hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-readlinecompletion_proc--prochttpsruby-docorgstdlib-251libdocreadlinerdocreadlinehtmlmethod-c-completion_proc&#34;&gt;4. &lt;a href=&#34;https://ruby-doc.org/stdlib-2.5.1/libdoc/readline/rdoc/Readline.html#method-c-completion_proc&#34;&gt;Readline::completion_proc = &amp;lt;proc&amp;gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Adds autocompletion functionality based on given proc&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;readline&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LIST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bear&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;computer&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;comp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proc { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LIST&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep(&lt;span style=&#34;color:#e6db74&#34;&gt;/^&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Regexp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;escape(s)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Readline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;completion_proc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; comp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Readline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ co&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*click on tab*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ computer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-stringdowncasehttpsruby-docorgcore-250stringhtmlmethod-i-downcase&#34;&gt;5. &lt;a href=&#34;https://ruby-doc.org/core-2.5.0/String.html#method-i-downcase&#34;&gt;String#downcase&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lower-cases a string&lt;/p&gt;
&lt;p&gt;Useful for keeping data format consistent&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HELLO WORLD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;downcase
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello world
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;6stringstriphttpsruby-docorgcore-250stringhtmlmethod-i-strip&#34;&gt;6.&lt;a href=&#34;https://ruby-doc.org/core-2.5.0/String.html#method-i-strip&#34;&gt;String#strip&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Takes off whitespace from beginning and end of string&lt;/p&gt;
&lt;p&gt;Useful for keeping data format consistent&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; hi there &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hi there
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(I know it doesn&amp;rsquo;t show up there, but there should be no white spaces at the ends of the string)&lt;/p&gt;
&lt;h3 id=&#34;7-ioreadfile-namehttpsruby-docorgcore-251iohtmlmethod-c-read&#34;&gt;7. &lt;a href=&#34;https://ruby-doc.org/core-2.5.1/IO.html#method-c-read&#34;&gt;IO.read(&amp;lt;file name&amp;gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Reads file content and returns it as string&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.json&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts file_content
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{\&amp;#34;some key\&amp;#34;: \&amp;#34;some value\&amp;#34;}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;8-jsonparsejson-stringhttpsruby-docorgstdlib-272libdocjsonrdocjsonhtmlmethod-i-parse&#34;&gt;8. &lt;a href=&#34;https://ruby-doc.org/stdlib-2.7.2/libdoc/json/rdoc/JSON.html#method-i-parse&#34;&gt;JSON#parse(&amp;lt;json string&amp;gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Converts JSON string to JSON object&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;some key&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;some value&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;9-jsondumpjson-stringhttpsruby-docorgstdlib-272libdocjsonrdocjsonhtmlmethod-i-dump&#34;&gt;9. &lt;a href=&#34;https://ruby-doc.org/stdlib-2.7.2/libdoc/json/rdoc/JSON.html#method-i-dump&#34;&gt;JSON#dump(&amp;lt;json string&amp;gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Converts JSON object to JSON string&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some value&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{\&amp;#34;some key\&amp;#34;: \&amp;#34;some value\&amp;#34;}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;10-fileopenfile-name-w-file-changes-to-file-httpsruby-docorgstdlib-272libdocjsonrdocjsonhtmlmethod-i-dump&#34;&gt;10. &lt;a href=&#34;https://ruby-doc.org/stdlib-2.7.2/libdoc/json/rdoc/JSON.html#method-i-dump&#34;&gt;File::Open(&amp;lt;file name&amp;gt;, &amp;lsquo;w&amp;rsquo;) {|file| &amp;lt;changes to file&amp;gt;} &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Opens and writes data to file (writing automatically gets it saved)&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some new key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some new value&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(file_name,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;){ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(new_data, file) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(file_name))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some value&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some new key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some new value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bonus&#34;&gt;Bonus:&lt;/h3&gt;
&lt;h3 id=&#34;11-ecolor-numbermsome-stringe0mhttpsenwikipediaorgwikiansi_escape_codecolors&#34;&gt;11. &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&#34;&gt;&amp;quot;\e[#{&amp;lt;color number&amp;gt;}m#{&amp;lt;some string&amp;gt;}\e[0m&amp;quot;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes color of string in shell based on &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&#34;&gt;ANSI escape code&lt;/a&gt; FG Code number&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;color_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# cyan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;color_num&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;str&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;

&lt;span style=&#34;color:#00aaaa&#34;&gt;Hello world&lt;/span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;show-me-the-code&#34;&gt;Show me the code&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;https://github.com/Hakeemmidan/custom-promotion-code-cli&#34;&gt;the link&lt;/a&gt; to the repo&lt;/p&gt;
&lt;p&gt;If you plan to create a similar tool, I suggest scanning around the &lt;a href=&#34;https://github.com/Hakeemmidan/custom-promotion-code-cli&#34;&gt;repo&lt;/a&gt; (same link). It&amp;rsquo;s basically 4 files of Ruby code, and none of them exceed 100 lines. Hope that helps&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why do puffins often have mutliple fish in their beaks at once?</title>
      <link>http://localhost:1313/posts/puffin-multiple-fish-in-beak-wonder/</link>
      <pubDate>Fri, 24 Jul 2020 21:07:40 +0300</pubDate>
      <guid>http://localhost:1313/posts/puffin-multiple-fish-in-beak-wonder/</guid>
      <description>&lt;p&gt;Have you ever noticed that puffins often simultaneously carry multiple fish in their beaks at once?&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;d be something like this:
&lt;figure class=&#34;image center u-filter-almost-black-and-white&#34;&gt;
&lt;a href=&#34;puffin-w-fish-in-mouth.jpg&#34;&gt;&lt;img src=&#34;puffin-w-fish-in-mouth.jpg&#34; alt=&#34;Puffin with multiple fish in beak&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Puffin with multiple fish in beak (&lt;a href=&#34;https://ocean.si.edu/ocean-life/seabirds/watching-fish-puffins-beak&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I thought this was interesting, and I had so many questions, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#do-they-catch-them-all-in-one-scoop&#34;&gt;Do they catch them all in one scoop?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-come-the-fish-are-so-organized&#34;&gt;How come the fish are so organized?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#do-they-hide-their-food-while-catching-other-fish-why-do-other-birds-not-steal-them&#34;&gt;Do they hide their food while catching other fish?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#is-this-a-flex&#34;&gt;Is this a &amp;lsquo;flex&amp;rsquo;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-type-of-fish-do-they-mostly-catch&#34;&gt;What type of fish do they mostly catch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-why&#34;&gt;The why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below, I attempt to answer each question (for Atlantic Puffins specifically).&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;do-they-catch-them-all-in-one-scoop&#34;&gt;Do they catch them all in one scoop?&lt;/h3&gt;
&lt;p&gt;According to this &lt;a href=&#34;https://www.int-res.com/abstracts/meps/v520/p257-267/&#34;&gt;Oxford University study&lt;/a&gt;, the answer is no. Puffins make multiple dives per hunt (a.k.a. bout), catching about 1 fish in each dive. They average about 25 dives per hunt.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;how-come-the-fish-are-so-organized&#34;&gt;How come the fish are so organized?&lt;/h3&gt;
&lt;p&gt;According to BBC, in &lt;a href=&#34;https://www.bbc.co.uk/programmes/articles/3DlgWjmWQg2qBYLY1J0vFgN/thirteen-proper-puffin-facts&#34;&gt;this article&lt;/a&gt;, puffins stack fish in their beaks using a combination of their tongue and beaks.&lt;/p&gt;
&lt;p&gt;Their beaks contain &amp;rsquo;tentacles&amp;rsquo;, which are like small teeth that keep the fish in place. And they use their tongues to push up existing fish while opening their mouths to catch new ones.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;do-they-hide-their-food-while-catching-other-fish&#34;&gt;Do they hide their food while catching other fish?&lt;/h3&gt;
&lt;p&gt;No, they mostly just keep it in their beaks.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;is-this-a-flex&#34;&gt;Is this a &amp;lsquo;flex&amp;rsquo;?&lt;/h3&gt;
&lt;p&gt;It doesn&amp;rsquo;t seem like it. Their &lt;a href=&#34;https://en.wikipedia.org/wiki/Atlantic_puffin#Reproduction&#34;&gt;mating/courtship protocol&lt;/a&gt; doesn&amp;rsquo;t usually involve fish. But since I haven&amp;rsquo;t found too much evidence of that, I&amp;rsquo;d say that&amp;rsquo;s up for investigation!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-type-of-fish-do-they-mostly-catch&#34;&gt;What type of fish do they mostly catch?&lt;/h3&gt;
&lt;p&gt;According to this &lt;a href=&#34;https://www.int-res.com/abstracts/meps/v520/p257-267/&#34;&gt;Oxford University study&lt;/a&gt;, they mostly feed on &lt;a href=&#34;https://en.wikipedia.org/wiki/Sand_eel&#34;&gt;sand eel&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;the-why&#34;&gt;The why&lt;/h3&gt;
&lt;p&gt;According to &lt;a href=&#34;https://brill.com/view/journals/beh/40/3-4/article-p263_4.xml&#34;&gt;this study in Iceland&lt;/a&gt; and &lt;a href=&#34;https://www.bbc.co.uk/programmes/articles/3DlgWjmWQg2qBYLY1J0vFgN/thirteen-proper-puffin-facts&#34;&gt;this BBC article&lt;/a&gt;, other birds, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Skua&#34;&gt;Skuas&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Gull&#34;&gt;Gulls (aka Seagulls)&lt;/a&gt; would literally try to steal the fish off of the Puffins&amp;rsquo; mouths. And if some fish fall, these two birds, or other birds, would get it.&lt;/p&gt;
&lt;p&gt;So the short answer is: &lt;strong&gt;They keep it in their mouths to keep it safe for their children.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Interestingly, Puffins &lt;a href=&#34;https://www.worldwildlife.org/blogs/good-nature-travel/posts/ten-high-flying-facts-about-puffins#:~:text=Puffins%20lay%20just%20one%20egg,and%20caring%20for%20the%20chick.&#34;&gt;only lay one egg a year&lt;/a&gt;. So they have to be extra careful with that food.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s kind of heroic; they&amp;rsquo;re fighting for their baby&amp;rsquo;s (singular) life. They could just eat the fish and abandon their baby/chick, but they choose not to. It&amp;rsquo;s also worth mentioning that puffins are tiny, they&amp;rsquo;re smaller than a Subway sandwich (&lt;a href=&#34;https://www.birders-store.co.uk/the-north-american-bird-guide-2nd-edition.html&#34;&gt;11 inches tall&lt;/a&gt;), and weigh less than a soda can (&lt;a href=&#34;https://www.birders-store.co.uk/the-north-american-bird-guide-2nd-edition.html&#34;&gt;380 g&lt;/a&gt;). So &lt;a href=&#34;https://www.youtube.com/watch?v=r777dlf7wRM&#34;&gt;other birds can really mess them up&lt;/a&gt;. Which makes this whole thing even more heroic.&lt;/p&gt;
&lt;p&gt;I understand that this is a childlike view, if you look at it from a scientific view, they&amp;rsquo;re just keeping their species from going extinct. But I guess we could still learn a thing or two from them.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Puffins feed on Sea Eels (fish) and carry a bunch of them around either for themselves or for their chick (they lay one egg a year). Because it would be too dangerous to leave it on the ground otherwise.&lt;/p&gt;
&lt;p&gt;They sound like great parents and deserve a round of &lt;a href=&#34;https://en.wikipedia.org/wiki/Ululation&#34;&gt;Ululation&lt;/a&gt;. Kolololoooosh&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;side-note&#34;&gt;Side note:&lt;/h3&gt;
&lt;p&gt;While looking into this, I found out that there&amp;rsquo;s another type of bird that stacks fish in their beak! The bird&amp;rsquo;s name is the Razorbill (a.k.a. Alca torda). Here is a picture of it carrying fish like a puffin:&lt;/p&gt;
&lt;figure class=&#34;image center u-filter-almost-black-and-white&#34;&gt;
&lt;a href=&#34;razorbill-w-fish-in-mouth.jpg&#34;&gt;&lt;img src=&#34;razorbill-w-fish-in-mouth.jpg&#34; alt=&#34;Razorbill with multiple fish in beak&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Razorbill with multiple fish in beak (&lt;a href=&#34;http://www.oiseaux-birds.com/page-family-alcidae.html&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;But according to &lt;a href=&#34;https://www.int-res.com/abstracts/meps/v520/p257-267/&#34;&gt;this study&lt;/a&gt; (the same Oxford study mentioned above) puffins do tend to carry more fish overall. Razorbills can carry 2 to 10 fish, whereas puffins can carry up to 50!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SCSS Animation Mixin</title>
      <link>http://localhost:1313/posts/scss-animation-mixin/</link>
      <pubDate>Tue, 05 May 2020 17:15:02 -0700</pubDate>
      <guid>http://localhost:1313/posts/scss-animation-mixin/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;The slightest change in CSS animations (&lt;code&gt;@keyframes&lt;/code&gt;) requires a creation of a new animation.&lt;/p&gt;
&lt;h4 id=&#34;problem-example&#34;&gt;Problem Example&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SCSS&#34; data-lang=&#34;SCSS&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@keyframes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;to-yellow&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yellow&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@keyframes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;to-skyblue&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;skyblue&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both of the animations pretty much do the same thing, but we had to create two of them.
We had to create two of them because their property (&lt;code&gt;background-color&lt;/code&gt;) had different values (i.e. &lt;code&gt;yellow&lt;/code&gt; and &lt;code&gt;skyblue&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t follow the &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; software development principle.&lt;/p&gt;
&lt;p&gt;To fix this, we&amp;rsquo;re going to use an SCSS &lt;a href=&#34;https://sass-lang.com/documentation/at-rules/mixin&#34;&gt;mixin&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Looking at the problem example above, we&amp;rsquo;d replace it with something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SCSS&#34; data-lang=&#34;SCSS&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@mixin&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; animation-mixin&lt;/span&gt;($name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; $color-var) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@keyframes&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;$name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $color-var; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@include&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; animation-mixin&lt;/span&gt;(to-yellow&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yellow&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@include&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; animation-mixin&lt;/span&gt;(to-skyblue&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;skyblue&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then you could call the &lt;code&gt;to-yellow&lt;/code&gt; and &lt;code&gt;to-skyblue&lt;/code&gt; animations in your selectors as needed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SCSS&#34; data-lang=&#34;SCSS&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;whitesmoke&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;animation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; to-yellow &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;s&lt;/span&gt; ease infinite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Live example:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


  &lt;p class=&#34;codepen&#34; data-height=&#34;265&#34; data-theme-id=&#34;dark&#34; data-default-tab=&#34;css,result&#34; data-user=&#34;Hakeemmidan&#34; data-slug-hash=&#34;OJPaezR&#34; style=&#34;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&#34; data-pen-title=&#34;SCSS Animation Mixin&#34;&gt;
    &lt;span&gt;See the Pen &lt;a href=&#34;https://codepen.io/Hakeemmidan/pen/OJPaezR&#34;&gt;
    SCSS Animation Mixin&lt;/a&gt; by Abdulhakeem Almidan (&lt;a href=&#34;https://codepen.io/Hakeemmidan&#34;&gt;@Hakeemmidan&lt;/a&gt;)
    on &lt;a href=&#34;https://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
  &lt;/p&gt;
  &lt;script async src=&#34;https://static.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>How to Prevent CSS Hover State From Getting stuck on Mobile Browsers</title>
      <link>http://localhost:1313/posts/css-hover-on-mobile/</link>
      <pubDate>Thu, 16 Apr 2020 21:58:27 -0700</pubDate>
      <guid>http://localhost:1313/posts/css-hover-on-mobile/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;The CSS hover state often gets stuck on mobile (touch screen) browsers. It would be something like this:&lt;/p&gt;
&lt;figure class=&#34;image center&#34;&gt;
&lt;a href=&#34;example-sticky-hover.gif&#34;&gt;&lt;img src=&#34;example-sticky-hover.gif&#34; alt=&#34;GIF of clicking on link and css hover state getting stuck&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Hover state getting stuck on-click on mobile&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Using the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/hover&#34;&gt;&amp;lsquo;hover&amp;rsquo; CSS media query&lt;/a&gt;, which could be applied either through SCSS or CSS. In the case of SCSS, we&amp;rsquo;re going to use a &lt;a href=&#34;https://sass-lang.com/documentation/at-rules/mixin&#34;&gt;mixin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is each solution respectively:&lt;/p&gt;
&lt;h3 id=&#34;option-1-scss-mixin&#34;&gt;Option 1: SCSS Mixin&lt;/h3&gt;
&lt;p&gt;The mixin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SCSS&#34; data-lang=&#34;SCSS&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@mixin&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; hover-supported&lt;/span&gt; {    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;@media&lt;/span&gt; (hover&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; hover) { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;@content&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Example use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SCSS&#34; data-lang=&#34;SCSS&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;.example&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;@include&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; hover-supported&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;:hover&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;black&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;option-2-css&#34;&gt;Option 2: CSS&lt;/h3&gt;
&lt;p&gt;Example use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-CSS&#34; data-lang=&#34;CSS&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @&lt;span style=&#34;color:#66d9ef&#34;&gt;media&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;hover&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;hover&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;hover&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;black&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;explanation&#34;&gt;Explanation&lt;/h3&gt;
&lt;p&gt;Both examples change the &lt;code&gt;background-color&lt;/code&gt; of HTML elements with class &lt;code&gt;example&lt;/code&gt;
only when they&amp;rsquo;re hovered-over on non-touch screen devices (or any &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/hover&#34;&gt;hover&lt;/a&gt;
supported device). In short, &lt;em&gt;this applies hover styling on only non-touch screen devices&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;PS: I&amp;rsquo;m not sure how this would act on touch-screen laptops.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Choosing a Static Website Generator: Hugo vs. Jekyll</title>
      <link>http://localhost:1313/posts/hugo-vs-jekyll/</link>
      <pubDate>Mon, 23 Mar 2020 23:37:28 -0700</pubDate>
      <guid>http://localhost:1313/posts/hugo-vs-jekyll/</guid>
      <description>&lt;h2 id=&#34;what-are-static-websites&#34;&gt;What are static websites?&lt;/h2&gt;
&lt;p&gt;In simple terms, static websites are a collection of webpages that have fixed content. They are the most basic type of website and are typically considered the easiest to create.&lt;/p&gt;
&lt;p&gt;These websites are considered the easiest to create because they have a low barrier of entry. They usually are not connected to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_access_layer&#34;&gt;backend&lt;/a&gt; or a &lt;a href=&#34;https://en.wikipedia.org/wiki/Database&#34;&gt;database&lt;/a&gt;, so the only thing that you need to manage is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Presentation_layer&#34;&gt;frontend&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given that information, static websites look essentially the same for all users (because you wouldn&amp;rsquo;t have user data to customize their experience). User data, like emails and &lt;a href=&#34;https://en.wikipedia.org/wiki/Digest_access_authentication&#34;&gt;password digests&lt;/a&gt;, need a database for storage and are considered unsafe to store in the frontend.&lt;/p&gt;
&lt;h2 id=&#34;why-pick-a-static-website-over-a-regular-dynamic-website&#34;&gt;Why pick a static website over a &amp;lsquo;regular&amp;rsquo;, dynamic website?&lt;/h2&gt;
&lt;p&gt;Although static websites are cool and all, why should one choose them over dynamic (a.k.a. full-stack) websites? Here are the advantages that a static website holds over a dynamic one (generally speaking):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster:&lt;/strong&gt; Since static websites don&amp;rsquo;t have a backend or a database, all the &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_hosting_service&#34;&gt;web hosting server&lt;/a&gt; has to do is serve the needed file. There will be no API calls to retrieve data from the database, so you&amp;rsquo;re less likely to see any loading signs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cheaper:&lt;/strong&gt; Hosting static websites is mostly free. They can be hosted on free web hosting services such as &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;, and others. The only cost that you&amp;rsquo;re likely to face is for a custom domain name, and that&amp;rsquo;s optional.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Safer:&lt;/strong&gt; Since there&amp;rsquo;s no backend or database, your site is less likely to be breached for private data. There&amp;rsquo;s no opportunity to perform &lt;a href=&#34;https://en.wikipedia.org/wiki/SQL_injection&#34;&gt;SQL injection&lt;/a&gt; and similar database attacks. I think it&amp;rsquo;s good practice to assume that anything stored in your static website will be available to the public.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;when-should-i-choose-a-static-website-over-a-dynamic-one&#34;&gt;When should I choose a static website over a dynamic one?&lt;/h2&gt;
&lt;p&gt;You should pick to choose a static website if your website doesn&amp;rsquo;t allow users to make POST, PUT, PATCH, CONNECT or DELETE &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34;&gt;HTTP&lt;/a&gt; requests. In other words, you should probably choose to use a static website if your users are not going to modify any of your website&amp;rsquo;s data.&lt;/p&gt;
&lt;h2 id=&#34;what-are-static-website-generators&#34;&gt;What are static website &lt;em&gt;generators&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;Static website &lt;em&gt;generators&lt;/em&gt; are exactly what they sound like. They&amp;rsquo;re automated processes that help you produce static websites. These technologies differentiate themselves in different ways. But the main two differentiating themes are typically speed and customization.&lt;/p&gt;
&lt;h2 id=&#34;picking-a-static-website-generator&#34;&gt;Picking a static website generator&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a list of &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;the most popular static site generators&lt;/a&gt;. Currently, the top three are &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;, &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, and &lt;a href=&#34;https://nuxtjs.org/&#34;&gt;Nuxt.js&lt;/a&gt;. &lt;a href=&#34;https://www.gatsbyjs.org/&#34;&gt;Gatsby.js&lt;/a&gt; is a pretty popular one too.&lt;/p&gt;
&lt;p&gt;Today, we&amp;rsquo;re going to be talking about &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, how they differ, and why you may choose one over the other. But before we go on, you may be wondering: why are we not looking at something like Next or Nuxt since they&amp;rsquo;re so popular? Well, although these technologies are great, I&amp;rsquo;ve decided to avoid writing about them due to a few reasons, including the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;They&amp;rsquo;re built on top of frameworks:&lt;/strong&gt; Next is built on &lt;a href=&#34;https://reactjs.org/&#34;&gt;React.js&lt;/a&gt;, and Nuxt is built on &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt;. So learning them would also mean that you&amp;rsquo;re going to eventually learn the framework behind them. Hugo and Jekyll, on the other hand, are built on &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; and &lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby&lt;/a&gt; (programming languages) respectively. So their barrier to entry is a bit lower.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;They&amp;rsquo;re often used as a part of full-stack applications:&lt;/strong&gt; Next and Nuxt are typically used to optimize the frontend of full-stack applications (and are kind of built for that purpose). So browsing questions about them and reading their documentation may confuse you if you plan to use them to build pure static websites [that aren&amp;rsquo;t connected to a backend or database in any way]. Hugo and Jekyll, in contrast, are mostly designed to create and maintain stand-alone static websites. So getting help for them may be easier.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo-vs-jekyll-style-themes&#34;&gt;Hugo vs. Jekyll: Style (themes)&lt;/h2&gt;
&lt;p&gt;You can pick a theme to build your website (rather than building it from scratch). Most themes are free and open-sourced. There are plenty of themes to choose from in both technologies.&lt;/p&gt;
&lt;p&gt;Popular themes are sometimes available under both technologies. So if you see a theme that you like with one technology, I would suggest searching for it in the other. Here are links to theme pages for each:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/docs/themes/&#34;&gt;Jekyll themes&lt;/a&gt; (under &amp;ldquo;Pick up a theme&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo-vs-jekyll-speed&#34;&gt;Hugo vs. Jekyll: Speed&lt;/h2&gt;
&lt;p&gt;One of the main differences between Hugo and Jekyll is their speed. Looking at &lt;a href=&#34;https://forestry.io/blog/hugo-vs-jekyll-benchmark/&#34;&gt;this&lt;/a&gt; benchmarking test, it is said that Hugo is &amp;ldquo;&amp;hellip; between 23 and 63 times faster than Jekyll&amp;rdquo; (Macrae, 2018) in terms of build time. This becomes more apparent as the number of pages grows. Here&amp;rsquo;s a graph demonstrating the difference:&lt;/p&gt;
&lt;figure class=&#34;image center&#34;&gt;
&lt;a href=&#34;hugo-vs-jekyll-speed-graph.png&#34;&gt;&lt;img src=&#34;hugo-vs-jekyll-speed-graph.png&#34; alt=&#34;Column graph of build times by Hugo and Jekyll as page number increases&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Build time difference on page number increase (&lt;a href=&#34;https://forestry.io/blog/hugo-vs-jekyll-benchmark/&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;hugo-vs-jekyll-the-learning-curve&#34;&gt;Hugo vs. Jekyll: The learning curve&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hugo&amp;rsquo;s docs are harder to follow:&lt;/strong&gt; As pointed out by Ben Congdon in &lt;a href=&#34;https://benjamincongdon.me/blog/2018/06/06/Switching-from-Jekyll-to-Hugo/&#34;&gt;his blog&lt;/a&gt;, Hugo follows a &lt;a href=&#34;https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design&#34;&gt;top-down engineering&lt;/a&gt; approach, where it tries to provide everything a user may need. While Jekyll, on the other hand, follows a &lt;a href=&#34;https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design&#34;&gt;bottom-up&lt;/a&gt; approach where it provides minimal tools and lets you build the rest. This makes Hugo a little harder to learn. I personally found its documentation to be a little overwhelming. Jekyll&amp;rsquo;s documentation was much easier to read, navigate, and follow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Great communities with both:&lt;/strong&gt; Although Jekyll (&lt;a href=&#34;https://en.wikipedia.org/wiki/Jekyll_(software)&#34;&gt;est. 2008&lt;/a&gt;) has been around longer than Hugo (&lt;a href=&#34;https://en.wikipedia.org/wiki/Hugo_(software)&#34;&gt;est. 2013&lt;/a&gt;), I found both to have great communities. I didn&amp;rsquo;t have trouble finding answers for either of them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Programming language familiarity:&lt;/strong&gt; Depending on the programming languages you currently know, you may choose one technology over the other. As discussed, Jekyll is built on Ruby and Hugo is built on Go. If you&amp;rsquo;re a beginner programmer, choosing Jekyll may be the easier route since Ruby is considered easier to learn than Go. If you&amp;rsquo;re familiar with &lt;a href=&#34;https://stackoverflow.com/a/1517670/7974948&#34;&gt;statically typed programming&lt;/a&gt; languages, then Hugo may be the better option for you, as Go is statically typed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It may be important to note that according to &lt;a href=&#34;https://hired.com/state-of-software-engineers&#34;&gt;this&lt;/a&gt; report by &lt;a href=&#34;https://hired.com/home&#34;&gt;Hired.com&lt;/a&gt;, programmers experienced with Go had the most interview requests on their platform (in 2019). Here&amp;rsquo;s a graph demonstrating this further:&lt;/p&gt;
&lt;figure class=&#34;image center&#34;&gt;
&lt;a href=&#34;hired-most-demand-langs.png&#34;&gt;&lt;img src=&#34;hired-most-demand-langs.png&#34; alt=&#34;Graph of most in demand programming languages provided by Hired&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Most in demand programming languages of 2019 (&lt;a href=&#34;https://hired.com/state-of-software-engineers&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So if you are currently looking for a job (like I am), it may be worth it to look into Go, and how it may help you grow as a programmer. In case you do want to check it out, I think going through &lt;a href=&#34;https://tour.golang.org/welcome/1&#34;&gt;this interactive tutorial&lt;/a&gt; provided by the language&amp;rsquo;s official website may be a good way to start.&lt;/p&gt;
&lt;h2 id=&#34;hugo-vs-jekyll-when-to-use-what&#34;&gt;Hugo vs. Jekyll: When to use what&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll:&lt;/strong&gt; I would recommend using Jekyll for building websites that don&amp;rsquo;t exceed 500 pages in size (to avoid long build time). Look at &lt;a href=&#34;https://developer.spotify.com/&#34;&gt;Spotify for Developers&lt;/a&gt;, &lt;a href=&#34;https://www.twitchcon.com/&#34;&gt;TwitchCon&amp;rsquo;s website&lt;/a&gt;, and &lt;a href=&#34;https://www.sketch.com/&#34;&gt;Sketch App&amp;rsquo;s website&lt;/a&gt; for Jekyll generated examples. More can be found on &lt;a href=&#34;https://jekyllrb.com/showcase/&#34;&gt;Jekyll&amp;rsquo;s showcase page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hugo:&lt;/strong&gt; I would recommend Hugo for blogs, and for websites that you know are going to continue to grow in page count over time. Look at &lt;a href=&#34;https://benjamincongdon.me/&#34;&gt;Ben Congdon&amp;rsquo;s website&lt;/a&gt;, &lt;a href=&#34;https://annadodson.co.uk/&#34;&gt;Anna Dodson&amp;rsquo;s website&lt;/a&gt;, and &lt;a href=&#34;https://www.pharmaseal.co/&#34;&gt;Pharmaseal&amp;rsquo;s website&lt;/a&gt; for Hugo generated examples. More can be found on &lt;a href=&#34;https://gohugo.io/showcase/&#34;&gt;Hugo&amp;rsquo;s showcase page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to look at an even deeper comparison of the two technologies, I recommend &lt;a href=&#34;https://forestry.io/blog/hugo-and-jekyll-compared/&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://forestry.io/&#34;&gt;Forestry.io&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
