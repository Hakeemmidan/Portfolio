[{"content":"The Problem When working in the terminal, you sometimes need to list only the directories in the current location. The standard ls command shows both files and directories, which can be overwhelming in cluttered directories.\nThe command for listing only directories in the current location is ls -d */ which is not simple to remember, especially if it\u0026rsquo;s not something that you do often.\nThe Solution: lsdir lsdir, an alias for only listing directories, which hopefully is easier to remember.\n1. Open your .zshrc or .bashrc file: For Zsh:\nvim ~/.zshrc For Bash:\nvim ~/.bashrc 2. Click i on your keyboard to go into editing mode in vim 3. Add the following line: alias lsdir=\u0026#39;ls -d */\u0026#39; 4. Save the file and reload your shell configuration: For Zsh:\nsource ~/.zshrc For Bash:\nsource ~/.bashrc 5. Try it lsdir You\u0026rsquo;re done; Happy coding! 👾\n","date":"13 September, 2024","id":0,"permalink":"/posts/lsdir/","summary":"\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eWhen working in the terminal, you sometimes need to list only the directories in the current location. The standard \u003ccode\u003els\u003c/code\u003e command shows both files and directories, which can be overwhelming in cluttered directories.\u003c/p\u003e\n\u003cp\u003eThe command for listing only directories in the current location is \u003ccode\u003els -d */\u003c/code\u003e which is not simple to remember, especially if it\u0026rsquo;s not something that you do often.\u003c/p\u003e\n\u003ch2 id=\"the-solution-lsdir\"\u003eThe Solution: lsdir\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003elsdir\u003c/code\u003e, an alias for only listing directories, which hopefully is easier to remember.\u003c/p\u003e","tags":"bash zsh ls","title":"lsdir - A Shell Alias for Only Listing Directories"},{"content":"Problem Do you ever NOT feel like re-writing a command that you wrote some N commands ago? I do!\nArrowing up and focusing until you reach what you want can be annoying for an efficient programmer. Although it usually only takes a couple of seconds, it still adds up. Plus, you don\u0026rsquo;t want to waste your brainpower on such a task (unless you like doing it).\nOne of the best pieces of advice I heard when I first started programming is:\n\u0026ldquo;Always improve/automate tasks that you know you\u0026rsquo;re going to continuously repeat in the future\u0026rdquo;\nSo let\u0026rsquo;s do that. Let\u0026rsquo;s improve this situation.\nSolution Ctrl+r This does a \u0026lsquo;reverse-i-search\u0026rsquo; or \u0026lsquo;bck-i-search\u0026rsquo;, which finds the most recent closest match.\nCtrl+r again to go to next match (further back in history).\nCtrl+r keyboard shortcut example use\nIt searches through an environment variable called $HISTFILE. The number of commands that this file remembers depends on your $HISTSIZE.\nI believe the default $HISTSIZE in Unix/Linux is around 500. You can check yours by running:\n$ echo $HISTSIZE Alternative approach $ history 0 0 echo \u0026#39;example command 0\u0026#39; 1 echo \u0026#39;example command 1\u0026#39; 2 echo \u0026#39;example command 2\u0026#39; 3 echo \u0026#39;example command 3\u0026#39; ... This displays your history from 0 to $HISTSIZE.\nYou can either scroll or Cmd+f to find your command. To execute the command, run:\n$ !\u0026lt;command-number\u0026gt; \u0026hellip; where command-number is the number displayed leftmost to your selected command.\n\u0026lsquo;history 0\u0026rsquo; command example use\nHappy coding!\n","date":"31 December, 2020","id":1,"permalink":"/posts/terminal-search/","summary":"\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cp\u003eDo you ever \u003cem\u003eNOT\u003c/em\u003e feel like re-writing a command that you wrote some N commands ago?\nI do!\u003c/p\u003e\n\u003cp\u003eArrowing up and focusing until you reach what you want can be annoying for an efficient\nprogrammer. Although it usually only takes a couple of seconds, it still adds up. Plus,\nyou don\u0026rsquo;t want to waste your brainpower on such a task (unless you like doing it).\u003c/p\u003e\n\u003cp\u003eOne of the best pieces of advice I heard when I first started programming is:\u003c/p\u003e","tags":"terminal","title":"Stop Arrowing Up So Much In Terminal; Search Instead! (Linux/Unix)"},{"content":"Table of contents What Why The Tools Show me the code What This is post is going to be referring to this custom promotion-code generating CLI\u0026rsquo;s code, and about useful tools that helped in building it. All the tools mentioned are native to Ruby (no external gems were used)\nThe data generated is going to be stored in a JSON object, and has the following format:\n\u0026#34;\u0026lt;FirstName LastName\u0026gt;\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;String: Generated code\u0026#34;, \u0026#34;activated\u0026#34;: \u0026#34;Boolean\u0026#34; } You may think \u0026ldquo;Wait a minute there, that\u0026rsquo;s not a scalable solution, isn\u0026rsquo;t it?\u0026rdquo;\nWell, yes, ideally, the promotion codes should be directly connected to your database. But if you want a quick solution, this should be fine\nAlso, keep in mind that this is not storing your main data. It\u0026rsquo;s just storing the promotion codes and checking whether they\u0026rsquo;re activated or not. It has a constant (O(1)) lookup and write time-complexity, and can hold an awful lot of data. Approximately, a JSON file can hold about 18 quintillion characters. For context: \u0026ldquo;Harry Potter and the Deathly Hallows\u0026rdquo; has about 1 million characters. So, in total, a JSON file would hold about 13 trillion copies of that book. That\u0026rsquo;s a lot!\nScreenshot of promotional code generator CLI\nWhy \u0026ldquo;Why should I bother with creating a custom promotion-code generator?\u0026rdquo;\nAs you may know, promotional codes are typically used in stores, offline and online, to drive traffic. Generally speaking, general promotion codes (ones not mapped to a specific person), don\u0026rsquo;t need to be unique. In fact, you want them to be generic to drive as much traffic to your store as possible. They should be easy to guess and could be safely made up by humans\nCustomized promotion codes, on the other hand, though intended to also drive traffic, have another sole purpose. The main purpose of them should be to get specific people onto your platform\nUnderstanding that these codes are made for specific people, you want them to be harder to guess. That is because we don\u0026rsquo;t want some imposter claiming our invitees\u0026rsquo; rewards\nHope that makes sense. If not, feel free to drop a comment\nThe Tools 1. Kernel#puts Prints string on single line (doesn\u0026rsquo;t allow other stuff to get printed on same line)\nExample:\nputs \u0026#39;Hello\u0026#39; puts \u0026#39;world\u0026#39; Output:\nHello World 2. Kernel#gets and String#chomp gets: Takes input from shell\nchomp: Takes off newline character (\u0026quot;\\n\u0026quot;) off from end of string. This character gets generated when user hits the enter key\nPut together because they are often used together. Just having Kernel#gets will leave you with a string with \u0026quot;\\n\u0026quot; at the end of it\nThe following example uses both to avoid that\nExample:\nputs \u0026#39;Please say something: \u0026#39; answer = gets.chomp puts answer Output:\n$ Please say something: Hello Hello Note: The project referred to in this post doesn\u0026rsquo;t use gets.chomp and uses Readline (#3) instead. That is since Readline provides autocompletion, history reference, and other useful functionalities. But gets.chomp could be useful for getting simple input in some instances. So it\u0026rsquo;s worth the mention\n3. Readline::readline(\u0026lt;file name\u0026gt;, \u0026lt;refer to history bool\u0026gt;) Takes input from shell. Takes off newline character (\u0026quot;\\n\u0026quot;) automatically\nSecond argument takes boolean to flag whether to remember history or not. If you set to true, it will remember previous answers from same file-run session\nExample:\nrequire \u0026#39;readline\u0026#39; answer = Readline.readline(\u0026#39;Please say something: \u0026#39;, true) puts answer answer = Readline.readline(\u0026#39;Please say something: \u0026#39;, true) puts answer Output:\n$ Please say something: Hello Hello $ Please say something: [*click up-arrow*] $ Please say something: Hello Hello 4. Readline::completion_proc = \u0026lt;proc\u0026gt; Adds autocompletion functionality based on given proc\nExample:\nrequire \u0026#39;readline\u0026#39; LIST = [\u0026#39;action\u0026#39;, \u0026#39;bear\u0026#39;, \u0026#39;computer\u0026#39;] comp = proc { |s| LIST.grep(/^#{Regexp.escape(s)}/) } Readline.completion_proc = comp Readline.readline(\u0026#39;\u0026#39;, true) Output:\n$ co[*click on tab*] $ computer 5. String#downcase Lower-cases a string\nUseful for keeping data format consistent\nExample:\nputs \u0026#39;HELLO WORLD\u0026#39;.downcase Output:\nhello world 6.String#strip Takes off whitespace from beginning and end of string\nUseful for keeping data format consistent\nExample:\nputs \u0026#39; hi there \u0026#39;.strip Output:\nhi there (I know it doesn\u0026rsquo;t show up there, but there should be no white spaces at the ends of the string)\n7. IO.read(\u0026lt;file name\u0026gt;) Reads file content and returns it as string\nExample:\nfile_content = IO.read(\u0026#39;data.json\u0026#39;) puts file_content Output:\n\u0026#34;{\\\u0026#34;some key\\\u0026#34;: \\\u0026#34;some value\\\u0026#34;}\u0026#34; 8. JSON#parse(\u0026lt;json string\u0026gt;) Converts JSON string to JSON object\nExample:\nrequire \u0026#39;json\u0026#39; puts JSON.parse(\u0026#34;{\\\u0026#34;some key\\\u0026#34;: \\\u0026#34;some value\\\u0026#34;}\u0026#34;) Output:\n{\u0026#34;some key\u0026#34;: \u0026#34;some value\u0026#34;} 9. JSON#dump(\u0026lt;json string\u0026gt;) Converts JSON object to JSON string\nExample:\nrequire \u0026#39;json\u0026#39; puts JSON.dump({\u0026#34;some key\u0026#34;: \u0026#34;some value\u0026#34;}) Output:\n\u0026#34;{\\\u0026#34;some key\\\u0026#34;: \\\u0026#34;some value\\\u0026#34;}\u0026#34; 10. File::Open(\u0026lt;file name\u0026gt;, \u0026lsquo;w\u0026rsquo;) {|file| \u0026lt;changes to file\u0026gt;} Opens and writes data to file (writing automatically gets it saved)\nExample:\nrequire \u0026#39;json\u0026#39; file_name = \u0026#39;data.json\u0026#39; new_data = {\u0026#34;some new key\u0026#34;: \u0026#34;some new value\u0026#34;} File.open(file_name,\u0026#39;w\u0026#39;){ |file| JSON.dump(new_data, file) } json = JSON.parse(IO.read(file_name)) puts json Output:\n{\u0026#34;some key\u0026#34;: \u0026#34;some value\u0026#34;, \u0026#34;some new key\u0026#34;: \u0026#34;some new value\u0026#34;} Bonus: 11. \u0026quot;\\e[#{\u0026lt;color number\u0026gt;}m#{\u0026lt;some string\u0026gt;}\\e[0m\u0026quot; Changes color of string in shell based on ANSI escape code FG Code number\nExample:\nstr = \u0026#39;Hello world\u0026#39; color_num = 36 # cyan puts \u0026#34;\\e[#{color_num}m#{str}\\e[0m\u0026#34; Output:\nHello world Show me the code Here\u0026rsquo;s the link to the repo\nIf you plan to create a similar tool, I suggest scanning around the repo (same link). It\u0026rsquo;s basically 4 files of Ruby code, and none of them exceed 100 lines. Hope that helps\nHappy coding!\n","date":"24 November, 2020","id":2,"permalink":"/posts/custom-promotion-code-cli/","summary":"\u003ch2 id=\"table-of-contents\"\u003eTable of contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#what\"\u003eWhat\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#why\"\u003eWhy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#the-tools\"\u003eThe Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#show-me-the-code\"\u003eShow me the code\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what\"\u003eWhat\u003c/h2\u003e\n\u003cp\u003eThis is post is going to be referring to \u003ca href=\"https://github.com/Hakeemmidan/custom-promotion-code-cli\"\u003ethis custom promotion-code generating CLI\u003c/a\u003e\u0026rsquo;s code, and about useful tools that helped in building it. All the tools mentioned are native to Ruby (no external gems were used)\u003c/p\u003e\n\u003cp\u003eThe data generated is going to be stored in a JSON object, and has the following format:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-JSON\" data-lang=\"JSON\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;FirstName LastName\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;String: Generated code\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;activated\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Boolean\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou may think \u0026ldquo;Wait a minute there, that\u0026rsquo;s not a scalable solution, isn\u0026rsquo;t it?\u0026rdquo;\u003c/p\u003e","tags":"","title":"Useful Tools that Helped in Building a Custom Promotion-Code CLI (built in Ruby)"},{"content":"Have you ever noticed that puffins often simultaneously carry multiple fish in their beaks at once?\nIt\u0026rsquo;d be something like this: Puffin with multiple fish in beak (Source)\nI thought this was interesting, and I had so many questions, including:\nDo they catch them all in one scoop? How come the fish are so organized? Do they hide their food while catching other fish? Is this a \u0026lsquo;flex\u0026rsquo;? What type of fish do they mostly catch? The why Conclusion Below, I attempt to answer each question (for Atlantic Puffins specifically).\nDo they catch them all in one scoop? According to this Oxford University study, the answer is no. Puffins make multiple dives per hunt (a.k.a. bout), catching about 1 fish in each dive. They average about 25 dives per hunt.\nHow come the fish are so organized? According to BBC, in this article, puffins stack fish in their beaks using a combination of their tongue and beaks.\nTheir beaks contain \u0026rsquo;tentacles\u0026rsquo;, which are like small teeth that keep the fish in place. And they use their tongues to push up existing fish while opening their mouths to catch new ones.\nDo they hide their food while catching other fish? No, they mostly just keep it in their beaks.\nIs this a \u0026lsquo;flex\u0026rsquo;? It doesn\u0026rsquo;t seem like it. Their mating/courtship protocol doesn\u0026rsquo;t usually involve fish. But since I haven\u0026rsquo;t found too much evidence of that, I\u0026rsquo;d say that\u0026rsquo;s up for investigation!\nWhat type of fish do they mostly catch? According to this Oxford University study, they mostly feed on sand eel.\nThe why According to this study in Iceland and this BBC article, other birds, such as Skuas and Gulls (aka Seagulls) would literally try to steal the fish off of the Puffins\u0026rsquo; mouths. And if some fish fall, these two birds, or other birds, would get it.\nSo the short answer is: They keep it in their mouths to keep it safe for their children.\nInterestingly, Puffins only lay one egg a year. So they have to be extra careful with that food.\nIt\u0026rsquo;s kind of heroic; they\u0026rsquo;re fighting for their baby\u0026rsquo;s (singular) life. They could just eat the fish and abandon their baby/chick, but they choose not to. It\u0026rsquo;s also worth mentioning that puffins are tiny, they\u0026rsquo;re smaller than a Subway sandwich (11 inches tall), and weigh less than a soda can (380 g). So other birds can really mess them up. Which makes this whole thing even more heroic.\nI understand that this is a childlike view, if you look at it from a scientific view, they\u0026rsquo;re just keeping their species from going extinct. But I guess we could still learn a thing or two from them.\nConclusion Puffins feed on Sea Eels (fish) and carry a bunch of them around either for themselves or for their chick (they lay one egg a year). Because it would be too dangerous to leave it on the ground otherwise.\nThey sound like great parents and deserve a round of Ululation. Kolololoooosh\nSide note: While looking into this, I found out that there\u0026rsquo;s another type of bird that stacks fish in their beak! The bird\u0026rsquo;s name is the Razorbill (a.k.a. Alca torda). Here is a picture of it carrying fish like a puffin:\nRazorbill with multiple fish in beak (Source)\nBut according to this study (the same Oxford study mentioned above) puffins do tend to carry more fish overall. Razorbills can carry 2 to 10 fish, whereas puffins can carry up to 50!\n","date":"24 July, 2020","id":3,"permalink":"/posts/puffin-multiple-fish-in-beak-wonder/","summary":"\u003cp\u003eHave you ever noticed that puffins often simultaneously carry multiple fish in their beaks at once?\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;d be something like this:\n\u003cfigure class=\"image center u-filter-almost-black-and-white\"\u003e\n\u003ca href=\"puffin-w-fish-in-mouth.jpg\"\u003e\u003cimg src=\"puffin-w-fish-in-mouth.jpg\" alt=\"Puffin with multiple fish in beak\"\u003e\u003c/a\u003e\n\u003cfigcaption\u003e\n\u003cp\u003ePuffin with multiple fish in beak (\u003ca href=\"https://ocean.si.edu/ocean-life/seabirds/watching-fish-puffins-beak\"\u003eSource\u003c/a\u003e)\u003c/p\u003e\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003eI thought this was interesting, and I had so many questions, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#do-they-catch-them-all-in-one-scoop\"\u003eDo they catch them all in one scoop?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-come-the-fish-are-so-organized\"\u003eHow come the fish are so organized?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#do-they-hide-their-food-while-catching-other-fish-why-do-other-birds-not-steal-them\"\u003eDo they hide their food while catching other fish?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#is-this-a-flex\"\u003eIs this a \u0026lsquo;flex\u0026rsquo;?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#what-type-of-fish-do-they-mostly-catch\"\u003eWhat type of fish do they mostly catch?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#the-why\"\u003eThe why\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBelow, I attempt to answer each question (for Atlantic Puffins specifically).\u003c/p\u003e","tags":"birds","title":"Why do puffins often have mutliple fish in their beaks at once?"},{"content":"Problem The slightest change in CSS animations (@keyframes) requires a creation of a new animation.\nProblem Example @keyframes to-yellow { 50% { background-color: yellow; } } @keyframes to-skyblue { 50% { background-color: skyblue; } } Both of the animations pretty much do the same thing, but we had to create two of them. We had to create two of them because their property (background-color) had different values (i.e. yellow and skyblue).\nThis doesn\u0026rsquo;t follow the DRY software development principle.\nTo fix this, we\u0026rsquo;re going to use an SCSS mixin.\nSolution Looking at the problem example above, we\u0026rsquo;d replace it with something like this:\n@mixin animation-mixin($name, $color-var) { @keyframes #{$name} { 50% { background-color: $color-var; } } } @include animation-mixin(to-yellow, yellow); @include animation-mixin(to-skyblue, skyblue); Then you could call the to-yellow and to-skyblue animations in your selectors as needed:\ndiv { height: 100px; width: 100px; background-color: whitesmoke; animation: to-yellow 4s ease infinite; } Live example:\nSee the Pen SCSS Animation Mixin by Abdulhakeem Almidan (@Hakeemmidan) on CodePen. ","date":"5 May, 2020","id":4,"permalink":"/posts/scss-animation-mixin/","summary":"\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cp\u003eThe slightest change in CSS animations (\u003ccode\u003e@keyframes\u003c/code\u003e) requires a creation of a new animation.\u003c/p\u003e\n\u003ch4 id=\"problem-example\"\u003eProblem Example\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SCSS\" data-lang=\"SCSS\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003e@keyframes\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eto-yellow\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e50\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e%\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003ebackground-color\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eyellow\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003e@keyframes\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eto-skyblue\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e50\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e%\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003ebackground-color\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eskyblue\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBoth of the animations pretty much do the same thing, but we had to create two of them.\nWe had to create two of them because their property (\u003ccode\u003ebackground-color\u003c/code\u003e) had different values (i.e. \u003ccode\u003eyellow\u003c/code\u003e and \u003ccode\u003eskyblue\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThis doesn\u0026rsquo;t follow the \u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\"\u003eDRY\u003c/a\u003e software development principle.\u003c/p\u003e","tags":"css scss","title":"SCSS Animation Mixin"},{"content":"Problem The CSS hover state often gets stuck on mobile (touch screen) browsers. It would be something like this:\nHover state getting stuck on-click on mobile\nSolution Using the \u0026lsquo;hover\u0026rsquo; CSS media query, which could be applied either through SCSS or CSS. In the case of SCSS, we\u0026rsquo;re going to use a mixin.\nHere is each solution respectively:\nOption 1: SCSS Mixin The mixin:\n@mixin hover-supported { @media (hover: hover) { @content; } } Example use:\n.example { @include hover-supported() { \u0026amp;:hover { background-color: black; } } } Option 2: CSS Example use:\n@media (hover: hover) { .example:hover { background-color: black; } } Explanation Both examples change the background-color of HTML elements with class example only when they\u0026rsquo;re hovered-over on non-touch screen devices (or any hover supported device). In short, this applies hover styling on only non-touch screen devices.\nPS: I\u0026rsquo;m not sure how this would act on touch-screen laptops.\n","date":"16 April, 2020","id":5,"permalink":"/posts/css-hover-on-mobile/","summary":"\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cp\u003eThe CSS hover state often gets stuck on mobile (touch screen) browsers. It would be something like this:\u003c/p\u003e\n\u003cfigure class=\"image center\"\u003e\n\u003ca href=\"example-sticky-hover.gif\"\u003e\u003cimg src=\"example-sticky-hover.gif\" alt=\"GIF of clicking on link and css hover state getting stuck\"\u003e\u003c/a\u003e\n\u003cfigcaption\u003e\n\u003cp\u003eHover state getting stuck on-click on mobile\u003c/p\u003e\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eUsing the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/hover\"\u003e\u0026lsquo;hover\u0026rsquo; CSS media query\u003c/a\u003e, which could be applied either through SCSS or CSS. In the case of SCSS, we\u0026rsquo;re going to use a \u003ca href=\"https://sass-lang.com/documentation/at-rules/mixin\"\u003emixin\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHere is each solution respectively:\u003c/p\u003e\n\u003ch3 id=\"option-1-scss-mixin\"\u003eOption 1: SCSS Mixin\u003c/h3\u003e\n\u003cp\u003eThe mixin:\u003c/p\u003e","tags":"css scss","title":"How to Prevent CSS Hover State From Getting stuck on Mobile Browsers"},{"content":"What are static websites? In simple terms, static websites are a collection of webpages that have fixed content. They are the most basic type of website and are typically considered the easiest to create.\nThese websites are considered the easiest to create because they have a low barrier of entry. They usually are not connected to a backend or a database, so the only thing that you need to manage is the frontend.\nGiven that information, static websites look essentially the same for all users (because you wouldn\u0026rsquo;t have user data to customize their experience). User data, like emails and password digests, need a database for storage and are considered unsafe to store in the frontend.\nWhy pick a static website over a \u0026lsquo;regular\u0026rsquo;, dynamic website? Although static websites are cool and all, why should one choose them over dynamic (a.k.a. full-stack) websites? Here are the advantages that a static website holds over a dynamic one (generally speaking):\nFaster: Since static websites don\u0026rsquo;t have a backend or a database, all the web hosting server has to do is serve the needed file. There will be no API calls to retrieve data from the database, so you\u0026rsquo;re less likely to see any loading signs.\nCheaper: Hosting static websites is mostly free. They can be hosted on free web hosting services such as GitHub Pages, Netlify, and others. The only cost that you\u0026rsquo;re likely to face is for a custom domain name, and that\u0026rsquo;s optional.\nSafer: Since there\u0026rsquo;s no backend or database, your site is less likely to be breached for private data. There\u0026rsquo;s no opportunity to perform SQL injection and similar database attacks. I think it\u0026rsquo;s good practice to assume that anything stored in your static website will be available to the public.\nWhen should I choose a static website over a dynamic one? You should pick to choose a static website if your website doesn\u0026rsquo;t allow users to make POST, PUT, PATCH, CONNECT or DELETE HTTP requests. In other words, you should probably choose to use a static website if your users are not going to modify any of your website\u0026rsquo;s data.\nWhat are static website generators? Static website generators are exactly what they sound like. They\u0026rsquo;re automated processes that help you produce static websites. These technologies differentiate themselves in different ways. But the main two differentiating themes are typically speed and customization.\nPicking a static website generator Here\u0026rsquo;s a list of the most popular static site generators. Currently, the top three are Next.js, Hugo, and Nuxt.js. Gatsby.js is a pretty popular one too.\nToday, we\u0026rsquo;re going to be talking about Jekyll and Hugo, how they differ, and why you may choose one over the other. But before we go on, you may be wondering: why are we not looking at something like Next or Nuxt since they\u0026rsquo;re so popular? Well, although these technologies are great, I\u0026rsquo;ve decided to avoid writing about them due to a few reasons, including the following:\nThey\u0026rsquo;re built on top of frameworks: Next is built on React.js, and Nuxt is built on Vue.js. So learning them would also mean that you\u0026rsquo;re going to eventually learn the framework behind them. Hugo and Jekyll, on the other hand, are built on Go and Ruby (programming languages) respectively. So their barrier to entry is a bit lower.\nThey\u0026rsquo;re often used as a part of full-stack applications: Next and Nuxt are typically used to optimize the frontend of full-stack applications (and are kind of built for that purpose). So browsing questions about them and reading their documentation may confuse you if you plan to use them to build pure static websites [that aren\u0026rsquo;t connected to a backend or database in any way]. Hugo and Jekyll, in contrast, are mostly designed to create and maintain stand-alone static websites. So getting help for them may be easier.\nHugo vs. Jekyll: Style (themes) You can pick a theme to build your website (rather than building it from scratch). Most themes are free and open-sourced. There are plenty of themes to choose from in both technologies.\nPopular themes are sometimes available under both technologies. So if you see a theme that you like with one technology, I would suggest searching for it in the other. Here are links to theme pages for each:\nJekyll themes (under \u0026ldquo;Pick up a theme\u0026rdquo;) Hugo themes Hugo vs. Jekyll: Speed One of the main differences between Hugo and Jekyll is their speed. Looking at this benchmarking test, it is said that Hugo is \u0026ldquo;\u0026hellip; between 23 and 63 times faster than Jekyll\u0026rdquo; (Macrae, 2018) in terms of build time. This becomes more apparent as the number of pages grows. Here\u0026rsquo;s a graph demonstrating the difference:\nBuild time difference on page number increase (Source)\nHugo vs. Jekyll: The learning curve Hugo\u0026rsquo;s docs are harder to follow: As pointed out by Ben Congdon in his blog, Hugo follows a top-down engineering approach, where it tries to provide everything a user may need. While Jekyll, on the other hand, follows a bottom-up approach where it provides minimal tools and lets you build the rest. This makes Hugo a little harder to learn. I personally found its documentation to be a little overwhelming. Jekyll\u0026rsquo;s documentation was much easier to read, navigate, and follow.\nGreat communities with both: Although Jekyll (est. 2008) has been around longer than Hugo (est. 2013), I found both to have great communities. I didn\u0026rsquo;t have trouble finding answers for either of them.\nProgramming language familiarity: Depending on the programming languages you currently know, you may choose one technology over the other. As discussed, Jekyll is built on Ruby and Hugo is built on Go. If you\u0026rsquo;re a beginner programmer, choosing Jekyll may be the easier route since Ruby is considered easier to learn than Go. If you\u0026rsquo;re familiar with statically typed programming languages, then Hugo may be the better option for you, as Go is statically typed.\nIt may be important to note that according to this report by Hired.com, programmers experienced with Go had the most interview requests on their platform (in 2019). Here\u0026rsquo;s a graph demonstrating this further:\nMost in demand programming languages of 2019 (Source)\nSo if you are currently looking for a job (like I am), it may be worth it to look into Go, and how it may help you grow as a programmer. In case you do want to check it out, I think going through this interactive tutorial provided by the language\u0026rsquo;s official website may be a good way to start.\nHugo vs. Jekyll: When to use what Jekyll: I would recommend using Jekyll for building websites that don\u0026rsquo;t exceed 500 pages in size (to avoid long build time). Look at Spotify for Developers, TwitchCon\u0026rsquo;s website, and Sketch App\u0026rsquo;s website for Jekyll generated examples. More can be found on Jekyll\u0026rsquo;s showcase page.\nHugo: I would recommend Hugo for blogs, and for websites that you know are going to continue to grow in page count over time. Look at Ben Congdon\u0026rsquo;s website, Anna Dodson\u0026rsquo;s website, and Pharmaseal\u0026rsquo;s website for Hugo generated examples. More can be found on Hugo\u0026rsquo;s showcase page.\nIf you want to look at an even deeper comparison of the two technologies, I recommend this article by Forestry.io.\n","date":"23 March, 2020","id":6,"permalink":"/posts/hugo-vs-jekyll/","summary":"\u003ch2 id=\"what-are-static-websites\"\u003eWhat are static websites?\u003c/h2\u003e\n\u003cp\u003eIn simple terms, static websites are a collection of webpages that have fixed content. They are the most basic type of website and are typically considered the easiest to create.\u003c/p\u003e\n\u003cp\u003eThese websites are considered the easiest to create because they have a low barrier of entry. They usually are not connected to a \u003ca href=\"https://en.wikipedia.org/wiki/Data_access_layer\"\u003ebackend\u003c/a\u003e or a \u003ca href=\"https://en.wikipedia.org/wiki/Database\"\u003edatabase\u003c/a\u003e, so the only thing that you need to manage is the \u003ca href=\"https://en.wikipedia.org/wiki/Presentation_layer\"\u003efrontend\u003c/a\u003e.\u003c/p\u003e","tags":"hugo jekyll","title":"Choosing a Static Website Generator: Hugo vs. Jekyll"},{"content":"Hi, I’m Abdulhakeem. You can call me Hakeem. I have experience building full-stack applications in many languages and frameworks. What I’ve learned over time is that the main mental challenge often lies in the logic behind what you\u0026rsquo;re building, and not in the language/framework itself.\nOutside of work, I enjoy painting, playing volleyball, soccer, scuba diving, and hanging out with friends. I also enjoy reading about business and finance.\nResume link\nContact Hakeemmidan@gmail.com\nGitHub icon LinkedIn icon AngelList icon CodePen icon About website Like what you\u0026rsquo;re seeing? Subscribe below to recieve notifications of new posts ⬇️\nPromise not to send more than 1 email per month (not counting subscription confirmation email) 👨‍💻 This website is powered by Hugo using the Zen theme\n","date":"1 January, 0001","id":7,"permalink":"/about/","summary":"\u003cp\u003eHi,\nI’m Abdulhakeem. You can call me Hakeem. I have experience building full-stack applications in many languages and frameworks. What I’ve learned over time is that the main mental challenge often lies in the logic behind what you\u0026rsquo;re building, and not in the language/framework itself.\u003c/p\u003e\n\u003cp\u003eOutside of work, I enjoy painting, playing volleyball, soccer, scuba diving, and hanging out with friends. I also enjoy reading about business and finance.\u003c/p\u003e\n\u003ch3 id=\"resume\"\u003eResume\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://hakeemmidan.github.io/resume/\"\u003elink\u003c/a\u003e\u003c/p\u003e","tags":"","title":"About"}]