[{"content":"Have you ever noticed that puffins often simultaneously carry multiple fish in their beaks at once?\nIt\u0026rsquo;d be something like this:   Puffin with multiple fish in beak (Source)\n  I thought this was interesting, and I had so many questions, including:\n Do they catch them all in one scoop? How come the fish are so organized? Do they hide their food while catching other fish? Why do other birds not steal them? Is this a \u0026lsquo;flex\u0026rsquo;? What type of fish do they mostly catch?  Below, I attempt to answer each question.\n Do they catch them all in one scoop? According to this Oxford University study, the answer is no. Puffins make multiple dives per hunt (a.k.a. bout), catching about 1 fish in each dive. They average about 25 dives per hunt.\n How come the fish are so organized? According to BBC, in this article, puffins stack fish in their beaks using a combination of their tounge and beaks.\nTheir beaks contain \u0026lsquo;tentacles\u0026rsquo;, which are like small teeth that keep the fish in place. And they use their tounges to push up existing fish while openning their mouths to catch new ones.\n Do they hide their food while catching other fish? Why do other birds not steal them? Once puffins catch a fish they keep it in their mouth. So this shouldn\u0026rsquo;t be a problem, unless other birds literally steal the food off their mouths. And according to this article, that actually has happened before, where seagulls (of course it\u0026rsquo;s damn seagulls) were witnessed trying to steal food of a puffin\u0026rsquo;s mouth.\n Is this a \u0026lsquo;flex\u0026rsquo;? It doesn\u0026rsquo;t seem like it. Their mating/courtship protocol doesn\u0026rsquo;t usually involve fish. But since I haven\u0026rsquo;t found too much evidence of that, I\u0026rsquo;d say that\u0026rsquo;s up for investigation!\n What type of fish do they mostly catch? According to this Oxford University study, they mostly feed on sand eel.\n Side note: While looking into this, I found out that there\u0026rsquo;s another type of bird that stacks fish in their beak! The bird\u0026rsquo;s name is the Razorbill (a.k.a. Alca torda). Here is a picture of it carrying fish like a puffin:\n  Razorbill with multiple fish in beak (Source)\n  But according to this study (the same Oxford study mentioned above) puffins do tend to carry more fish overall. Razorbills can carry 2 to 10 fish, whereas puffins can carry up to 50!\n","date":"24 July, 2020","id":0,"permalink":"/posts/puffin-multiple-fish-in-beak-wonder/","summary":"Have you ever noticed that puffins often simultaneously carry multiple fish in their beaks at once?\nIt\u0026rsquo;d be something like this:   Puffin with multiple fish in beak (Source)\n  I thought this was interesting, and I had so many questions, including:\n Do they catch them all in one scoop? How come the fish are so organized? Do they hide their food while catching other fish? Why do other birds not steal them?","tags":"birds","title":"Why do puffins often have mutliple fish in their beaks at once?"},{"content":"Problem The slightest change in CSS animations (@keyframes) requires a creation of a new animation.\nProblem Example @keyframes to-yellow { 50% { background-color: yellow; } } @keyframes to-skyblue { 50% { background-color: skyblue; } } Both of the animations pretty much do the same thing, but we had to create two of them. We had to create two of them because their property (background-color) had different values (i.e. yellow and skyblue).\nThis doesn\u0026rsquo;t follow the DRY software development principle.\nTo fix this, we\u0026rsquo;re going to use an SCSS mixin.\nSolution Looking at the problem example above, we\u0026rsquo;d replace it with something like this:\n@mixinanimation-mixin($name, $color-var) { @keyframes #{$name} { 50% { background-color: $color-var; } } } @includeanimation-mixin(to-yellow, yellow); @includeanimation-mixin(to-skyblue, skyblue); Then you could call the to-yellow and to-skyblue animations in your selectors as needed:\ndiv { height: 100px; width: 100px; background-color: whitesmoke; animation: to-yellow 4s ease infinite; } Live example:\nSee the Pen SCSS Animation Mixin by Abdulhakeem Almidan (@Hakeemmidan) on CodePen.  ","date":"5 May, 2020","id":1,"permalink":"/posts/scss-animation-mixin/","summary":"Problem The slightest change in CSS animations (@keyframes) requires a creation of a new animation.\nProblem Example @keyframes to-yellow { 50% { background-color: yellow; } } @keyframes to-skyblue { 50% { background-color: skyblue; } } Both of the animations pretty much do the same thing, but we had to create two of them. We had to create two of them because their property (background-color) had different values (i.e. yellow and skyblue).","tags":"css scss","title":"SCSS Animation Mixin"},{"content":"Problem The CSS hover state often gets stuck on mobile (touch screen) browsers. It would be something like this:\n  Hover state getting stuck on-click on mobile\n  How to Fix It Using the \u0026lsquo;hover\u0026rsquo; CSS media query, which could be applied either through SCSS or CSS. In the case of SCSS, we\u0026rsquo;re going to use a mixin.\nHere is each solution respectively:\nSolution 1: SCSS Mixin The mixin:\n@mixinhover-supported { @media (hover: hover) { @content; } } Example use:\n.example { @includehover-supported() { \u0026amp;:hover { background-color: black; } } } Solution 2: CSS Example use:\n@media (hover: hover) { .example:hover { background-color: black; } } Explanation Both examples change the background-color of HTML elements with class example only when they\u0026rsquo;re hovered-over on non-touch screen devices (or any hover supported device). In other words, this applies hover styling on only non-touch screen devices.\nPS: I\u0026rsquo;m not sure how this would act on touch-screen laptops.\n","date":"16 April, 2020","id":2,"permalink":"/posts/css-hover-on-mobile/","summary":"Problem The CSS hover state often gets stuck on mobile (touch screen) browsers. It would be something like this:\n  Hover state getting stuck on-click on mobile\n  How to Fix It Using the \u0026lsquo;hover\u0026rsquo; CSS media query, which could be applied either through SCSS or CSS. In the case of SCSS, we\u0026rsquo;re going to use a mixin.\nHere is each solution respectively:\nSolution 1: SCSS Mixin The mixin:","tags":"css scss","title":"How to Prevent CSS Hover State From Getting stuck on Mobile Browsers"},{"content":"What are static websites? In simple terms, static websites are a collection of webpages that have fixed content. They are the most basic type of website and are typically considered the easiest to create.\nThese websites are considered the easiest to create because they have a low barrier of entry. They are usually not connected to a backend or a database, so the only thing that you will need to manage is the frontend.\nGiven that information, static websites look essentially the same for all users (because you wouldn\u0026rsquo;t have user data to customize their experience). User data, like emails and password digests, need a database for storage and are considered unsafe to store in the frontend.\nWhy pick a static website over a \u0026lsquo;regular\u0026rsquo;, dynamic website? Although static websites are cool and all, why should one choose them over dynamic (a.k.a. full-stack) websites? Here are the advantages that a static website holds over a dynamic one (generally speaking):\n  Faster: Since static websites don\u0026rsquo;t have a backend or a database, all the web hosting server has to do is serve the needed file. There will be no API calls to retrieve data from the database, so you\u0026rsquo;re less likely to see any loading signs.\n  Cheaper: Hosting static websites is mostly free. They can be hosted on free web hosting services such as GitHub Pages, Netlify, and others. The only cost that you\u0026rsquo;re likely to face is for a custom domain name, and that\u0026rsquo;s optional.\n  Safer: Since there\u0026rsquo;s no backend or database, your site is less likely to be breached for private data. There\u0026rsquo;s no opportunity to perform SQL injection and similar database attacks. I think it\u0026rsquo;s good practice to assume that anything stored in your static website will be available to the public.\n  When should I choose a static website over a dynamic one? You should pick to choose a static website if your website doesn\u0026rsquo;t allow users to make POST, PUT, PATCH, CONNECT or DELETE HTTP requests. In other words, you should probably choose to use a static website if your users are not going to modify any of your website\u0026rsquo;s data.\nWhat are static website generators? Static website generators are exactly what they sound like. They\u0026rsquo;re automated processes that help you produce static websites. These technologies differentiate themselves in different ways. But the main two differentiating themes are typically speed and customization.\nPicking a static website generator Here\u0026rsquo;s a list of the most popular static site generators. Currently, the top three are Next.js, Hugo, and Nuxt.js. Gatsby.js is a pretty popular one too.\nToday, we\u0026rsquo;re going to be talking about Jekyll and Hugo, how they differ, and why you may choose one over the other. But before we go on, you may be wondering: why are we not looking at something like Next or Nuxt since they\u0026rsquo;re so popular? Well, although these technologies are great, I\u0026rsquo;ve decided to avoid writing about them due to a few reasons, including the following:\n  They\u0026rsquo;re built on top of frameworks: Next is built on React.js, and Nuxt is built on Vue.js. So learning them would also mean that you\u0026rsquo;re going to eventually learn the framework behind them. Hugo and Jekyll, on the other hand, are built on Go and Ruby (programming languages) respectively. So their barrier to entry is a bit lower.\n  They\u0026rsquo;re often used as a part of full-stack applications: Next and Nuxt are typically used to optimize the frontend of full-stack applications (and are kind of built for that purpose). So browsing questions about them and reading their documentation may confuse you if you plan to use them to build pure static websites [that aren\u0026rsquo;t connected to a backend or database in any way]. Hugo and Jekyll, in contrast, are mostly designed to create and maintain stand-alone static websites. So getting help for them may be easier.\n  Hugo vs. Jekyll: Style (themes) You can pick a theme to build your website (rather than building it from scratch). Most themes are free and open-sourced. There are plenty of themes to choose from in both technologies.\nPopular themes are sometimes available under both technologies. So if you see a theme that you like with one technology, I would suggest searching for it in the other. Here are links to theme pages for each:\n Jekyll themes (under \u0026ldquo;Pick up a theme\u0026rdquo;) Hugo themes  Hugo vs. Jekyll: Speed One of the main differences between Hugo and Jekyll is their speed. Looking at this benchmarking test, it is said that Hugo is \u0026ldquo;\u0026hellip; between 23 and 63 times faster than Jekyll\u0026rdquo; (Macrae, 2018) in terms of build time. This becomes more apparent as the number of pages grows. Here\u0026rsquo;s a graph demonstrating the difference:\n  Build time difference on page number increase (Source)\n  Hugo vs. Jekyll: The learning curve   Hugo\u0026rsquo;s docs are harder to follow: As pointed out by Ben Congdon in his blog, Hugo follows a top-down engineering approach, where it tries to provide everything a user may need. While Jekyll, on the other hand, follows a bottom-up approach where it provides minimal tools and lets you build the rest. This makes Hugo a little harder to learn. I personally found its documentation to be a little overwhelming. Jekyll\u0026rsquo;s documentation was much easier to read, navigate, and follow.\n  Great communities with both: Although Jekyll (est. 2008) has been around longer than Hugo (est. 2013), I found both to have great communities. I didn\u0026rsquo;t have trouble finding answers for either of them.\n  Programming language familiarity: Depending on the programming languages you currently know, you may choose one technology over the other. As discussed, Jekyll is built on Ruby and Hugo is built on Go. If you\u0026rsquo;re a beginner programmer, choosing Jekyll may be the easier route since Ruby is considered easier to learn than Go. If you\u0026rsquo;re familiar with statically typed programming languages, then Hugo may be the better option for you, as Go is statically typed.\n  It may be important to note that according to this report by Hired.com, programmers experienced with Go had the most interview requests on their platform (in 2019). Here\u0026rsquo;s a graph demonstrating this further:\n  Most in demand programming languages of 2019 (Source)\n  So if you are currently looking for a job (like I am), it may be worth it to look into Go, and how it may help you grow as a programmer. In case you do want to check it out, I think going through this interactive tutorial provided by the language\u0026rsquo;s official website may be a good way to start.\nHugo vs. Jekyll: When to use what   Jekyll: I would recommend using Jekyll for building websites that don\u0026rsquo;t exceed 500 pages in size (to avoid long build time). Look at Spotify for Developers, TwitchCon\u0026rsquo;s website, and Sketch App\u0026rsquo;s website for Jekyll generated examples. More can be found on Jekyll\u0026rsquo;s showcase page.\n  Hugo: I would recommend Hugo for blogs, and for websites that you know are going to continue to grow in page count over time. Look at Ben Congdon\u0026rsquo;s website, Anna Dodson\u0026rsquo;s website, and Pharmaseal\u0026rsquo;s website for Hugo generated examples. More can be found on Hugo\u0026rsquo;s showcase page.\n  If you want to look at an even deeper comparison of the two technologies, I recommend this article by Forestry.io.\n","date":"23 March, 2020","id":3,"permalink":"/posts/hugo-vs-jekyll/","summary":"What are static websites? In simple terms, static websites are a collection of webpages that have fixed content. They are the most basic type of website and are typically considered the easiest to create.\nThese websites are considered the easiest to create because they have a low barrier of entry. They are usually not connected to a backend or a database, so the only thing that you will need to manage is the frontend.","tags":"hugo jekyll","title":"Choosing a Static Website Generator: Hugo vs. Jekyll"},{"content":"Hi, I’m Abdulhakeem. You can call me Hakeem. I have experience building full-stack applications in many languages and frameworks. What I’ve learned over time is that the main mental challenge often lies in the logic behind what you\u0026rsquo;re building, and not in the language/framework itself.\nOutside of work, I enjoy painting, playing volleyball, soccer, scuba diving, and hanging out with friends. I also enjoy reading about business and finance.\nI\u0026rsquo;m currently looking for software engineering and finance positions and I\u0026rsquo;d love to hear about your company!\nResume link\nContact Hakeemmidan@gmail.com\n GitHub icon  LinkedIn icon  AngelList icon  CodePen icon   About website Like what you\u0026rsquo;re seeing? Subscribe below to recieve notifications of new posts ⬇️\nPromise not to send more than 1 email per month (not counting subscription confirmation email 🙄) 🤞      This website is powered by Hugo using the Zen theme\n","date":"1 January, 0001","id":4,"permalink":"/about/","summary":"Hi, I’m Abdulhakeem. You can call me Hakeem. I have experience building full-stack applications in many languages and frameworks. What I’ve learned over time is that the main mental challenge often lies in the logic behind what you\u0026rsquo;re building, and not in the language/framework itself.\nOutside of work, I enjoy painting, playing volleyball, soccer, scuba diving, and hanging out with friends. I also enjoy reading about business and finance.\nI\u0026rsquo;m currently looking for software engineering and finance positions and I\u0026rsquo;d love to hear about your company!","tags":"","title":"About"}]